VIDEO 320x200;
MAPFILE <TEST.WMP>;
BIND <TEST.WDL>;
NEXUS 50;
CLIP_DIST 100;
LIGHT_ANGLE 1.0;

PALETTE MAINPAL{
	PALFILE <PALETTE.PCX>;
	FLAGS AUTORANGE;
}

# DEBUG STUFF
#FONT MAINFONT,<font_amb.lbm>,8,16;
#STRING DEBUGSTRING, ".......................................................................................................................................";
#TEXT DEBUGTEXT {
#	FONT MAINFONT;
#	POS_X 0;
#	POS_Y 0;
#	STRING DEBUGSTRING;
#	FLAGS VISIBLE;
#}
#PANEL debug_panel {
#POS_X 0;
#POS_Y 0;
#DIGITS 8,16,3,MAINFONT,100,DROP_F;
#FLAGS VISIBLE, REFRESH;
#}
BMAP LINEBMP, <LINE.PCX>;

TEXTURE LINETEX {
	SCALE_XY 16, 16;
	BMAPS LINEBMP;
	FLAGS CLIP;
}

THING LINETHING {
	TEXTURE LINETEX;
	FLAGS PASSABLE;
}

BMAP WALLBMP, <WALL.PCX>;

TEXTURE WALLTEX {
	SCALE_XY 16, 16;
	BMAPS WALLBMP;
	ALBEDO 0.5;
}

BMAP GREENBMP, <GREEN.PCX>;

TEXTURE GREENTEX {
	SCALE_XY 16, 16;
	BMAPS GREENBMP;
}

OVLY HANDBMP, <HAND.PCX>;
OVLY HAND_SHOOTBMP, <HAND2.PCX>;

OVERLAY HANDOVERLAY {
	OVLYS HANDBMP;
	POS_X 220;
	POS_Y 136;
}
OVERLAY HAND_SHOOTOVERLAY {
	OVLYS HAND_SHOOTBMP;
	POS_X 220;
	POS_Y 136;
}

SYNONYM WEAPONOVERLAY { TYPE OVERLAY; DEFAULT HANDOVERLAY; }

BMAP SPARK1, <SPARK1.PCX>;
BMAP SPARK2, <SPARK2.PCX>;
BMAP SPARK3, <SPARK3.PCX>;
BMAP SPARK4, <SPARK4.PCX>;
BMAP SPARK5, <SPARK5.PCX>;

TEXTURE SPARKTEX {
	SCALE_XY 32,32;
	SIDES 1;
	CYCLES 5;
	BMAPS SPARK1, SPARK2, SPARK3, SPARK4, SPARK5;
	DELAY 2,2,4,4,1;
	FLAGS ONESHOT;
}

ACTOR SPARKACTOR {
	TEXTURE SPARKTEX;
	FLAGS PASSABLE, IMMATERIAL, INVISIBLE;
}

OVLY CROSSHAIRBMP, <CROSSH~1.PCX>;

OVERLAY CROSSHAIROVERLAY {
	OVLYS CROSSHAIRBMP;
	POS_X 152;
	POS_Y 92;
}

TEXTURE NULLTEX {
	SCALE_XY 16, 16;
	BMAPS WALLBMP;
}

REGION BORDERREGION {
	FLOOR_HGT 0;
	CEIL_HGT 0;
	FLOOR_TEX NULLTEX;
	CEIL_TEX NULLTEX;
	CLIP_DIST 0;
}

REGION MAINREGION {
	FLOOR_HGT 0;
	CEIL_HGT 10;
	FLOOR_TEX GREENTEX;
	CEIL_TEX GREENTEX;
}

REGION COLUMNREGION {
	FLOOR_HGT 5;
	CEIL_HGT 10;
	FLOOR_TEX GREENTEX;
	CEIL_TEX GREENTEX;
}

WALL MAINWALL {
	TEXTURE WALLTEX;
}

SKILL PLAYER_TILT { MIN -1.35; MAX 1.35; }
SKILL MICKEY_MUL {}
SKILL SPEED { MIN -4; MAX 4; }
SKILL STRAFE { MIN -4; MAX 4; }
SKILL VZ {}
SKILL WEAPON_WAVE {}
SKILL ANGLE { }
SKILL TILT { MIN -1.35; MAX 1.35; }

SYNONYM SPARKACTOR_INSTANCE { TYPE ACTOR; }

ACTION GETSPARK {
	SET MY, SPARKACTOR;
	WHILE (1) {
		IF (MY.INVISIBLE) {
		 	SET SPARKACTOR_INSTANCE, MY;
			BREAK;
		}
	 	NEXT_MY;
	 	IF (MY == SPARKACTOR) {
		 	BREAK;
		}
	}
}

ACTION PICK_WEAPON {
	SET LAYERS.1, WEAPONOVERLAY;
	SET WEAPONOVERLAY.VISIBLE, 1;
	SET LAYERS.2, CROSSHAIROVERLAY;
	SET CROSSHAIROVERLAY.VISIBLE, 1;
}

ACTION UPDATE_WEAPONOVERLAY {
	SET WEAPONOVERLAY.VISIBLE, 0;
	SET WEAPONOVERLAY, HAND_SHOOTOVERLAY;
	CALL PICK_WEAPON;
	WAITT 2;
	SET WEAPONOVERLAY.VISIBLE, 0;
	SET WEAPONOVERLAY, HANDOVERLAY;
	CALL PICK_WEAPON;
}

SKILL SHOOT_TICKS { }

ACTION SHOOT_PISTOL {
	IF (TICKS - SHOOT_TICKS < 3) {
		END;
	}
	SET SHOOT_TICKS, TICKS;
	CALL UPDATE_WEAPONOVERLAY;
	#RULE SHOOT_X = RANDOM(0.3);
	#RULE SHOOT_Y = RANDOM(0.3);
	SHOOT;
	SET PLAYER_LIGHT, 2.0;
	IF (HIT == NULL) {
		END;
	}
	CALL GETSPARK;
	RULE SPARKACTOR_INSTANCE.DIST = HIT_DIST - 0.5;
	RULE SPARKACTOR_INSTANCE.HEIGHT = PLAYER_Z -1.0*HIT_DIST*PLAYER_TILT;
	DROP SPARKACTOR_INSTANCE;
	SET SPARKACTOR_INSTANCE.INVISIBLE, 0;
	SET SPARKACTOR_INSTANCE.CYCLE, 1;
	SET SPARKACTOR_INSTANCE.PLAY, 1;
	WAITT 5;
	SET PLAYER_LIGHT, 1.0;
	SET SPARKACTOR_INSTANCE.INVISIBLE, 1;
}

ACTION MOVE {
		# MOUSE LOOK X
		RULE MICKEY_MUL = -MICKEY_X * 0.01;
		ADD ANGLE, MICKEY_MUL;

		# MOUSE LOOK Y
		RULE MICKEY_MUL = MICKEY_Y * 0.01;
		ADD TILT, MICKEY_MUL;
	
		RULE PLAYER_ANGLE = ANGLE;
		RULE PLAYER_TILT = TILT;
		#RULE MOUSE_ANGLE = PLAYER_ANGLE;

		# WEAPON WAVE
		RULE WEAPON_WAVE = WEAPON_WAVE + (PLAYER_SPEED * 0.1);
		RULE WEAPONOVERLAY.POS_X = 220 + SIN(WEAPON_WAVE) * 10.0;
		#ULE WEAPONOVERLAY.POS_Y = 146 - COS(WEAPON_WAVE) * 10.0;

		# SHOOT
		IF (MOUSE_LEFT) {
			CALL SHOOT_PISTOL;
		}

		# IF PLAYER IS GROUNDED
		IF (PLAYER_HGT <= 0.0) 
		{
			# KEEP PLAYER IN GROUND
			IF (PLAYER_HGT < 0.0) {
				RULE VZ = 0;
				RULE PLAYER_Z = FLOOR_HGT + PLAYER_SIZE;
			}

			# SPEED AND STRAFE ACCELERATION
			IF_EQUAL KEY_W, 1;
				ADDT SPEED, 0.3;
			IF_EQUAL KEY_S, 1;
				ADDT SPEED, -0.3;
			IF_EQUAL KEY_A, 1;
				ADDT STRAFE, -0.3;
			IF_EQUAL KEY_D, 1;
				ADDT STRAFE, 0.3;

			# SPEED AND STRAFE FRICTION
			IF_NEQUAL SPEED, 0.0;
				RULE SPEED = SPEED * (1.0 - 0.4 * TIME_CORR);
			IF_NEQUAL STRAFE, 0.0;
				RULE STRAFE = STRAFE * (1.0 - 0.4 * TIME_CORR);

			# JUMP
			IF_EQUAL, KEY_SPACE, 1;
				SET VZ, 0.5;
		} 
		ELSE # IF PLAYER IS NOT GROUNDED
		{
			# GRAVITY
			ADDT VZ, -0.2;

			# SPEED AND STRAFE ACCELERATION
			IF_EQUAL KEY_W, 1;
				ADDT SPEED, 0.1;
			IF_EQUAL KEY_S, 1;
				ADDT SPEED, -0.1;
			IF_EQUAL KEY_A, 1;
				ADDT STRAFE, -0.1;
			IF_EQUAL KEY_D, 1;
				ADDT STRAFE, 0.1;
		}

		# UPDATE PLAYER VELOCITY
		RULE PLAYER_VY = SIN(PLAYER_ANGLE) * SPEED - COS(PLAYER_ANGLE) * STRAFE;
		RULE PLAYER_VX = COS(PLAYER_ANGLE) * SPEED + SIN(PLAYER_ANGLE) * STRAFE;
		RULE PLAYER_VZ = VZ * TIME_CORR;

		LOCATE;

		#TO_STRING DEBUGSTRING, FLOOR_HGT;

		SET RENDER_MODE, 2; 
}

ACTION START {
	SET MOUSE_CALM, 1;
	SET MOUSE_MODE, 0;
	SET MAP_MODE, 0;
	SET LIGHT_DIST, 1;
    SET PLAYER_ARC,	1.5;
	SET PLAYER_HGT, 0.0;
	SET PLAYER_SIZE, 3.0;
	SET PLAYER_CLIMB, 0.0;
	CALL PICK_WEAPON;
	WHILE (1) {
		CALL MOVE;
		WAITT 1;
	}
}

IF_START START;

ACTION RAISE_COLUMN {
	ADD COLUMNREGION.FLOOR_HGT, 0.5;
}

ACTION LOWER_COLUMN {
	ADD COLUMNREGION.FLOOR_HGT, -0.5;
}

IF_1 RAISE_COLUMN;
IF_2 LOWER_COLUMN;


ACTION RAISE_CLIMBISZE {
	ADD PLAYER_CLIMB, 0.5;
	SET LINETHING.HEIGHT, PLAYER_CLIMB;
}

ACTION LOWER_CLIMBISZE {
	ADD PLAYER_CLIMB, -0.5;
	SET LINETHING.HEIGHT, PLAYER_CLIMB;
}

IF_3 RAISE_CLIMBISZE;
IF_4 LOWER_CLIMBISZE;